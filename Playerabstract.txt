import java.util.UUID;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.SequenceGenerator;
import jakarta.persistence.Table;

public abstract class AbstractCompetitor {
    @Id
    @SequenceGenerator(
        name = "competitor_sequence",
        sequenceName = "competitor_sequence",
        allocationSize = 1
    )
    @GeneratedValue(
        strategy = GenerationType.SEQUENCE,
        generator = "competitor_sequence"
    )
    private UUID id;

    private String name;
    private double rank;

    // Default constructor
    public AbstractCompetitor() {
        // Generates a random UUID for the id
        this.id = UUID.randomUUID();
    }

    // Getter and Setter methods for id
    public UUID getId() {
        return id;
    }

    // Note: No setId method for id as it's generated automatically

    // Getter and Setter methods for name
    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    // Getter and Setter methods for rank
    public double getRank() {
        return rank;
    }

    public void setRank(double rank) {
        this.rank = rank;
    }

    // Abstract method to be implemented by subclasses
    public abstract void performAction();

    // Other methods or attributes common to all competitors can be added here
}

@Entity
@Table(name = "player")
class Player extends AbstractCompetitor {
    // Other fields specific to the Player class...

    // Constructors...

    // Implementing the abstract method
    @Override
    public void performAction() {
        // Implementation specific to Player class
    }

    // Other methods specific to the Player class...
}
